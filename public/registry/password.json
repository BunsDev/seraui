{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password",
  "title": "Password",
  "description": "A minimalistic password input component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "password.tsx",
      "content": "'use client'\r\nimport React, { useState } from 'react';\r\n\r\n// SVG Icon for visibility ON\r\nconst EyeIcon = ({ className  }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\r\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n  </svg>\r\n);\r\n\r\n// SVG Icon for visibility OFF\r\nconst EyeOffIcon = ({ className  }: { className?: string }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={className}\r\n  >\r\n    <path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\r\n    <path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\r\n    <path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\r\n    <line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\r\n  </svg>\r\n);\r\n\r\n\r\n// The main Password Input Component\r\nconst PasswordInput = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-sm space-y-2\">\r\n      <label\r\n        htmlFor=\"password\"\r\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n      >\r\n        Password\r\n      </label>\r\n      <div className=\"relative\">\r\n        <input\r\n          id=\"password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Enter your password\"\r\n          className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-3 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10\"\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          onClick={togglePasswordVisibility}\r\n          className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground transition-colors\"\r\n          aria-label=\"Toggle password visibility\"\r\n        >\r\n          {showPassword ? (\r\n            <EyeOffIcon className=\"h-4 w-4\" />\r\n          ) : (\r\n            <EyeIcon className=\"h-4 w-4\" />\r\n          )}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default PasswordInput",
      "type": "registry:ui"
    },
    {
      "path": "strongPassword.tsx",
      "content": "'use client'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// SVG Icon for visibility ON\r\nconst EyeIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n    <path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\r\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n  </svg>\r\n);\r\n\r\n// SVG Icon for visibility OFF\r\nconst EyeOffIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n    <path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\r\n    <path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\r\n    <path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\r\n    <line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\r\n  </svg>\r\n);\r\n\r\n// SVG Icon for validation check (valid)\r\nconst CheckIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n    </svg>\r\n);\r\n\r\n// SVG Icon for validation cross (invalid)\r\nconst XIcon = ({ className }: { className?: string }) => (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\r\n        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n    </svg>\r\n);\r\n\r\n\r\n// Validation criteria configuration\r\nconst validationRules = [\r\n  { id: 'length', text: 'At least 8 characters', regex: /.{8,}/ },\r\n  { id: 'number', text: 'At least 1 number', regex: /\\d/ },\r\n  { id: 'lowercase', text: 'At least 1 lowercase letter', regex: /[a-z]/ },\r\n  { id: 'uppercase', text: 'At least 1 uppercase letter', regex: /[A-Z]/ },\r\n  { id: 'special', text: 'At least 1 special character', regex: /[^A-Za-z0-9]/ },\r\n];\r\n\r\n// A single validation item component\r\nconst ValidationItem = ({ isValid, text }: { isValid: boolean, text: string }) => (\r\n  <li className={`flex items-center transition-colors duration-300 text-sm ${isValid ? 'text-green-600 dark:text-green-400' : 'text-muted-foreground'}`}>\r\n    {isValid ? <CheckIcon className=\"h-4 w-4 mr-2\" /> : <XIcon className=\"h-4 w-4 mr-2\" />}\r\n    <span>{text}</span>\r\n  </li>\r\n);\r\n\r\n\r\n// The main Password Input Component with Validation\r\nconst StrongPasswordInput = () => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [validationState, setValidationState] = useState({\r\n    length: false,\r\n    number: false,\r\n    lowercase: false,\r\n    uppercase: false,\r\n    special: false,\r\n  });\r\n  const [isPristine, setIsPristine] = useState(true);\r\n\r\n\r\n  // Effect to validate password whenever it changes\r\n  useEffect(() => {\r\n    // If the field is empty, don't show errors yet.\r\n    if (password === '') {\r\n        setIsPristine(true);\r\n        // Reset validation state\r\n        setValidationState({\r\n            length: false, number: false, lowercase: false, uppercase: false, special: false\r\n        });\r\n        return;\r\n    }\r\n\r\n    setIsPristine(false);\r\n\r\n    // Update validation state based on rules\r\n    const newValidationState = {\r\n      length: validationRules.find(r => r.id === 'length')!.regex.test(password),\r\n      number: validationRules.find(r => r.id === 'number')!.regex.test(password),\r\n      lowercase: validationRules.find(r => r.id === 'lowercase')!.regex.test(password),\r\n      uppercase: validationRules.find(r => r.id === 'uppercase')!.regex.test(password),\r\n      special: validationRules.find(r => r.id === 'special')!.regex.test(password),\r\n    };\r\n    setValidationState(newValidationState);\r\n  }, [password]);\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-sm space-y-4\">\r\n      <div className=\"space-y-2\">\r\n        <label\r\n          htmlFor=\"password\"\r\n          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n        >\r\n          Password\r\n        </label>\r\n        <div className=\"relative\">\r\n          <input\r\n            id=\"password\"\r\n            type={showPassword ? 'text' : 'password'}\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder=\"Create a strong password\"\r\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-3 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={togglePasswordVisibility}\r\n            className=\"absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground transition-colors\"\r\n            aria-label=\"Toggle password visibility\"\r\n          >\r\n            {showPassword ? (\r\n              <EyeOffIcon className=\"h-4 w-4\" />\r\n            ) : (\r\n              <EyeIcon className=\"h-4 w-4\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Validation Criteria Section */}\r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex justify-between items-center\">\r\n            <h3 className=\"text-sm font-medium\">Password requirements:</h3>\r\n            {isPristine && <p className=\"text-xs text-muted-foreground\">Enter a password to check</p>}\r\n        </div>\r\n        <ul className=\"space-y-2\">\r\n            {validationRules.map(rule => (\r\n                <ValidationItem\r\n                    key={rule.id}\r\n                    isValid={validationState[rule.id as keyof typeof validationState]}\r\n                    text={rule.text}\r\n                />\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StrongPasswordInput;\r\n",
      "type": "registry:ui"
    }
  ]
}