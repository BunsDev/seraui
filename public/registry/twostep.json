{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "twostep",
  "title": "Twostep",
  "description": "A minimalistic two-step verification component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "twostep.tsx",
      "content": "'use client';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nexport default function TwoStep() {\r\n  const [code, setCode] = useState<string[]>(new Array(5).fill(''));\r\n  const [focusedIndex, setFocusedIndex] = useState<number>(0);\r\n  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);\r\n\r\n  // This function handles changes in the input fields.\r\n  const handleChange = (element: HTMLInputElement, index: number) => {\r\n    // Only allow numbers to be entered\r\n    if (isNaN(Number(element.value)) || element.value === ' ') {\r\n        element.value = '';\r\n        return;\r\n    };\r\n\r\n    // Update the code array with the new value\r\n    const newCode = [...code];\r\n    newCode[index] = element.value;\r\n    setCode(newCode);\r\n\r\n    // If there's a value and it's not the last input, focus the next one\r\n    if (element.value && index < 4) {\r\n      const nextInput = inputRefs.current[index + 1];\r\n      if (nextInput) {\r\n        nextInput.focus();\r\n      }\r\n    }\r\n  };\r\n\r\n  // This function handles key presses, specifically for Backspace.\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {\r\n    // If backspace is pressed and the input is empty, focus the previous input\r\n    if (e.key === 'Backspace' && !code[index] && index > 0) {\r\n      const prevInput = inputRefs.current[index - 1];\r\n      if (prevInput) {\r\n        prevInput.focus();\r\n      }\r\n    }\r\n  };\r\n\r\n  // This function handles pasting content into the input fields.\r\n  const handlePaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n    const pasteData = e.clipboardData.getData('text').slice(0, 5);\r\n    if (!/^\\d+$/.test(pasteData)) return; // Only paste if it's all digits\r\n\r\n    const newCode = new Array(5).fill('');\r\n    for (let i = 0; i < pasteData.length; i++) {\r\n        newCode[i] = pasteData[i];\r\n    }\r\n    setCode(newCode);\r\n    \r\n    // Focus on the last input that was filled by the paste\r\n    const lastFullInput = Math.min(pasteData.length - 1, 4);\r\n    if(lastFullInput >= 0) {\r\n        const targetInput = inputRefs.current[lastFullInput];\r\n        if (targetInput) {\r\n            targetInput.focus();\r\n        }\r\n    }\r\n  }\r\n\r\n  // Set focus to the first input on initial render\r\n  useEffect(() => {\r\n    const firstInput = inputRefs.current[0];\r\n    if(firstInput) {\r\n      firstInput.focus();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center font-sans p-4\">\r\n        {/* Main Card */}\r\n      <div className=\"bg-white dark:bg-[#161B22] border border-gray-200 dark:border-gray-800 p-6 sm:p-8 rounded-2xl shadow-2xl shadow-black/10 dark:shadow-black/20 max-w-sm w-full text-center text-gray-900 dark:text-white relative overflow-hidden\">\r\n        \r\n        {/* Mac-style dots */}\r\n        <div className=\"absolute top-4 left-4 flex space-x-2\">\r\n            <div className=\"w-3 h-3 bg-[#FF5F56] rounded-full\"></div>\r\n            <div className=\"w-3 h-3 bg-[#FFBD2E] rounded-full\"></div>\r\n            <div className=\"w-3 h-3 bg-[#27C93F] rounded-full\"></div>\r\n        </div>\r\n\r\n        <div className=\"relative z-10\">\r\n          <div className=\"flex justify-center mb-4 mt-8 sm:mt-4\">\r\n            <div className=\"w-40 h-40 flex items-center justify-center\">\r\n                 {/* New Logo Image with Glow */}\r\n                 <img \r\n                    src=\"https://i.postimg.cc/SKSNJ5SQ/White-Letter-S-Logo-Instagram-Post.png\" \r\n                    alt=\"Logo\" \r\n                    className=\"w-32 h-32 object-cover rounded-lg drop-shadow-[0_0_15px_rgba(59,130,246,0.5)]\"\r\n                    onError={(e) => { \r\n                      const target = e.target as HTMLImageElement;\r\n                      target.onerror = null; \r\n                      target.src='https://placehold.co/128x128/161B22/FFFFFF?text=S'; \r\n                    }}\r\n                 />\r\n            </div>\r\n          </div>\r\n\r\n          <h1 className=\"text-2xl font-bold mb-2 text-gray-900 dark:text-gray-200\">Sign In With Two-Step Verification</h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6 text-sm\">\r\n            We&apos;ve sent a 5 digit code to **********060\r\n          </p>\r\n\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 text-sm text-left font-medium\">Enter the code you received</p>\r\n\r\n          <div className=\"flex justify-center gap-2 sm:gap-3 mb-8\" onPaste={handlePaste}>\r\n            {code.map((data, index) => (\r\n              <input\r\n                key={index}\r\n                ref={(el) => {\r\n                  inputRefs.current[index] = el;\r\n                }}\r\n                type=\"tel\"\r\n                maxLength={1}\r\n                value={data}\r\n                placeholder=\"â€¢\"\r\n                onChange={(e) => handleChange(e.target, index)}\r\n                onKeyDown={(e) => handleKeyDown(e, index)}\r\n                onFocus={(e) => {\r\n                    e.target.select()\r\n                    setFocusedIndex(index)\r\n                }}\r\n                onBlur={() => setFocusedIndex(-1)}\r\n                className={`w-12 h-14 sm:w-14 sm:h-16 text-center text-2xl font-semibold bg-gray-50 dark:bg-[#0D1117] text-gray-900 dark:text-white rounded-lg outline-none transition-all placeholder-gray-400 dark:placeholder-gray-600\r\n                  ${focusedIndex === index \r\n                    ? 'border-2 border-blue-500' \r\n                    : 'border border-dashed border-gray-300 dark:border-gray-700 hover:border-gray-400 dark:hover:border-gray-600'\r\n                  }`}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          <p className=\"text-gray-500 dark:text-gray-500 text-sm\">\r\n            Didn&apos;t receive a code?{' '}\r\n            <button className=\"text-blue-600 dark:text-blue-500 hover:text-blue-500 dark:hover:text-blue-400 font-semibold focus:outline-none focus:underline\">\r\n              Resent code\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}