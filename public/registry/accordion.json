{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "title": "Accordion",
  "description": "A minimalistic accordion component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "accordion.tsx",
      "content": "import Accordion from './accordion'; \r\n\r\n// --- Data for the Accordion ---\r\nconst faqData = [\r\n  {\r\n    title: 'What are the key features of React?',\r\n    content:\r\n      \"React's key features include its component-based architecture, virtual DOM for performance, JSX for templating, and one-way data flow. It can also be rendered on the server side, making it flexible for various use cases.\",\r\n  },\r\n  {\r\n    title: 'How does Tailwind CSS improve development speed?',\r\n    content:\r\n      'Tailwind CSS accelerates development by providing a vast library of utility classes that can be applied directly in your HTML. This eliminates the need to write custom CSS for most styling, allowing for rapid prototyping and consistent design.',\r\n  },\r\n  {\r\n    title: 'What are best practices for accessibility (a11y)?',\r\n    content:\r\n      'Best practices for accessibility include using semantic HTML (e.g., <button>, <nav>), providing text alternatives for images (alt text), ensuring sufficient color contrast, enabling keyboard navigation, and using ARIA roles and attributes where necessary.',\r\n  },\r\n  {\r\n    title: 'How do you manage state in a complex React application?',\r\n    content:\r\n      'For complex applications, state can be managed using built-in hooks like `useReducer` and `useContext` for medium-sized apps, or dedicated state management libraries like Redux, Zustand, or MobX for larger, more intricate state requirements.',\r\n  },\r\n];\r\n\r\n// --- The Page Component ---\r\nexport default function AccordionPage() {\r\n  return (\r\n    <div className='flex flex-col items-center justify-center font-sans p-4 transition-colors duration-500'>\r\n      <div className='w-full max-w-2xl mx-auto'>\r\n        <h1 className='text-4xl font-bold text-gray-900 dark:text-slate-100 text-center mb-2'>\r\n          Modern Accordion\r\n        </h1>\r\n        <p className='text-gray-600 dark:text-slate-400 text-center mb-10'>\r\n          A production-ready, accessible, and stylish accordion component.\r\n        </p>\r\n        \r\n        {/* Here we use the reusable component with our data */}\r\n        <Accordion items={faqData} />\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "accordion.tsx",
      "content": "'use client';\r\nimport React, { useState, useMemo, useCallback, memo } from 'react';\r\n\r\n// --- Type Definitions for the component ---\r\ninterface AccordionItemData {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\ninterface AccordionProps {\r\n  items: AccordionItemData[];\r\n}\r\n\r\ninterface AccordionItemProps {\r\n  title: string;\r\n  content: string;\r\n  isOpen: boolean;\r\n  onClick: () => void;\r\n  isLast: boolean;\r\n}\r\n\r\n// --- Optimized Internal Accordion Item Component ---\r\nconst AccordionItem = memo(function AccordionItem({\r\n  title,\r\n  content,\r\n  isOpen,\r\n  onClick,\r\n  isLast,\r\n}: AccordionItemProps) {\r\n  // Memoize unique ID generation to avoid recalculation on every render\r\n  const uniqueId = useMemo(() => title.replace(/\\s+/g, '-'), [title]);\r\n\r\n  // Memoize CSS classes to prevent string concatenation on every render\r\n  const containerClasses = useMemo(() => \r\n    !isLast ? 'border-b border-gray-200 dark:border-slate-700' : '', \r\n    [isLast]\r\n  );\r\n\r\n  const buttonClasses = useMemo(() => \r\n    'w-full flex justify-between items-center p-5 text-left text-lg font-medium text-gray-800 dark:text-slate-200 hover:bg-gray-100 dark:hover:bg-slate-700/50 focus:outline-none focus-visible:ring focus-visible:ring-indigo-500 focus-visible:ring-opacity-75 transition-colors duration-300',\r\n    []\r\n  );\r\n\r\n  const iconClasses = useMemo(() => \r\n    `w-5 h-5 text-gray-500 dark:text-slate-400 transition-transform duration-300 ${isOpen ? 'rotate-45' : ''}`,\r\n    [isOpen]\r\n  );\r\n\r\n  const contentClasses = useMemo(() => \r\n    `grid overflow-hidden transition-all duration-500 ease-in-out ${isOpen ? 'grid-rows-[1fr] opacity-100' : 'grid-rows-[0fr] opacity-0'}`,\r\n    [isOpen]\r\n  );\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      <button\r\n        type='button'\r\n        className={buttonClasses}\r\n        onClick={onClick}\r\n        aria-expanded={isOpen}\r\n        aria-controls={`accordion-content-${uniqueId}`}\r\n        id={`accordion-header-${uniqueId}`}\r\n      >\r\n        <span>{title}</span>\r\n        <div className='w-6 h-6 flex-shrink-0 flex items-center justify-center'>\r\n          <svg\r\n            className={iconClasses}\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            fill='none'\r\n            viewBox='0 0 24 24'\r\n            strokeWidth={2}\r\n            stroke='currentColor'\r\n          >\r\n            <path\r\n              strokeLinecap='round'\r\n              strokeLinejoin='round'\r\n              d='M12 4.5v15m7.5-7.5h-15'\r\n            />\r\n          </svg>\r\n        </div>\r\n      </button>\r\n\r\n      <div\r\n        id={`accordion-content-${uniqueId}`}\r\n        role='region'\r\n        aria-labelledby={`accordion-header-${uniqueId}`}\r\n        className={contentClasses}\r\n      >\r\n        <div className='overflow-hidden'>\r\n          <div className='p-5 pt-2 text-gray-600 dark:text-slate-400'>\r\n            <p>{content}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// --- Main Reusable Accordion Component ---\r\nexport default function Accordion({ items }: AccordionProps) {\r\n  const [openIndex, setOpenIndex] = useState<number | null>(null);\r\n\r\n  // Memoize the click handler to prevent unnecessary re-renders of child components\r\n  const handleClick = useCallback((index: number) => {\r\n    setOpenIndex(prevIndex => prevIndex === index ? null : index);\r\n  }, []);\r\n\r\n  // Memoize the container classes\r\n  const containerClasses = useMemo(() => \r\n    'rounded-xl shadow-lg bg-gray-50 dark:bg-slate-800/60 border border-gray-200 dark:border-slate-700 backdrop-blur-sm',\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div className={containerClasses}>\r\n      {items.map((item, index) => (\r\n        <AccordionItem\r\n          key={`${item.title}-${index}`} // More stable key for better reconciliation\r\n          title={item.title}\r\n          content={item.content}\r\n          isOpen={openIndex === index}\r\n          onClick={() => handleClick(index)}\r\n          isLast={index === items.length - 1}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n} ",
      "type": "registry:ui"
    }
  ]
}