{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "title": "badge",
  "description": "A badge component designed with React and Tailwind CSS.",
  "author": "Nazmul Hossain",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "badge.tsx",
      "content": "'use client'\nimport React, { MouseEvent, ReactNode, ReactElement, useState, useEffect } from 'react';\n\n// Enhanced Icons\nconst XIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\n        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n    </svg>\n);\n\nconst LoadingIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={`${className} animate-spin`}>\n        <path d=\"M21 12a9 9 0 11-6.219-8.56\"/>\n    </svg>\n);\n\n// Enhanced Types\ntype BadgeSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\ntype BadgeShape = 'rounded' | 'pill' | 'square' | 'circle';\ntype BadgeAnimation = 'none' | 'pulse' | 'bounce' | 'float' | 'glow' | 'shake' | 'rotate' | 'scale' | 'gradient-shift';\ntype BadgePosition = 'static' | 'absolute' | 'fixed' | 'sticky';\n\n// Enhanced Badge Props Interface\ninterface BadgeBaseProps {\n  children: ReactNode;\n  size?: BadgeSize;\n  shape?: BadgeShape;\n  animation?: BadgeAnimation;\n  position?: BadgePosition;\n\n  // Icons and Content\n  iconLeft?: ReactElement;\n  iconRight?: ReactElement;\n  badge?: string | number; // For notification badges\n  loading?: boolean;\n\n  // Styling\n  className?: string;\n  style?: React.CSSProperties;\n\n  // Glass/Blur Effects\n  blur?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl';\n  opacity?: number;\n\n  // Shadow and Glow\n  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'inner';\n  glow?: boolean;\n\n  // Animation Options\n  animationDuration?: 'fast' | 'normal' | 'slow';\n\n  // Interactive States\n  disabled?: boolean;\n  active?: boolean;\n\n  // Events\n  onDismiss?: (event: MouseEvent<HTMLButtonElement>) => void;\n  onHover?: (event: MouseEvent<HTMLElement>) => void;\n  onFocus?: (event: React.FocusEvent<HTMLElement>) => void;\n\n  // Accessibility\n  'aria-label'?: string;\n  'aria-describedby'?: string;\n  role?: string;\n\n  // Positioning (for absolute/fixed badges)\n  top?: string | number;\n  right?: string | number;\n  bottom?: string | number;\n  left?: string | number;\n  zIndex?: number;\n}\n\n// Props for when the badge is a button or a link, including all standard HTML attributes\ntype BadgeActionProps = \n  | ({ onClick: (event: MouseEvent<HTMLButtonElement>) => void; href?: never; } & Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>)\n  | ({ href: string; onClick?: never; } & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>)\n  | ({ href?: undefined; onClick?: undefined } & React.HTMLAttributes<HTMLDivElement>);\n\n\nexport type BadgeProps = BadgeBaseProps & BadgeActionProps;\n\n\nexport const Badge = React.forwardRef<HTMLElement, BadgeProps>(({\n  children,\n  size = 'md',\n  shape = 'rounded',\n  animation = 'none',\n  position = 'static',\n  iconLeft,\n  iconRight,\n  badge,\n  loading = false,\n  className = '',\n  style = {},\n  blur = 'none',\n  opacity,\n  shadow = 'none',\n  glow = false,\n  animationDuration = 'normal',\n  disabled = false,\n  active = false,\n  onDismiss,\n  onHover,\n  onFocus,\n  onClick,\n  href,\n  top,\n  right,\n  bottom,\n  left,\n  zIndex,\n  ...props\n}, ref) => {\n\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  // Handle dismiss functionality\n  const handleDismiss = (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n    setIsDismissed(true);\n    onDismiss?.(event);\n  };\n\n  // Don't render if dismissed\n  if (isDismissed) return null;\n\n  // Enhanced Size Styles\n  const sizeStyles: Record<BadgeSize, string> = {\n    xs: 'px-1.5 py-0.5 text-xs',\n    sm: 'px-2.5 py-0.5 text-xs',\n    md: 'px-3 py-1.5 text-sm',\n    lg: 'px-4 py-2 text-base',\n    xl: 'px-5 py-2.5 text-lg',\n    '2xl': 'px-6 py-3 text-xl',\n  };\n\n  // Enhanced Icon Sizes\n  const iconSizeStyles: Record<BadgeSize, string> = {\n    xs: 'w-3 h-3',\n    sm: 'w-3.5 h-3.5',\n    md: 'w-4 h-4',\n    lg: 'w-5 h-5',\n    xl: 'w-6 h-6',\n    '2xl': 'w-7 h-7',\n  };\n\n  // Shape Styles\n  const shapeStyles: Record<BadgeShape, string> = {\n    rounded: 'rounded-full',\n    pill: 'rounded-full',\n    square: 'rounded-md',\n    circle: 'rounded-full aspect-square',\n  };\n\n  // Animation Styles\n  const animationStyles: Record<BadgeAnimation, string> = {\n    none: '',\n    pulse: 'animate-pulse',\n    bounce: 'animate-bounce',\n    float: 'animate-float',\n    glow: 'animate-glow',\n    shake: 'animate-shake',\n    rotate: 'animate-spin',\n    scale: 'hover:scale-110 transition-transform',\n    'gradient-shift': 'animate-gradient-x',\n  };\n\n  // Animation Duration Styles\n  const durationStyles: Record<string, string> = {\n    fast: 'duration-150',\n    normal: 'duration-300',\n    slow: 'duration-500',\n  };\n\n  // Shadow Styles\n  const shadowStyles: Record<string, string> = {\n    none: '',\n    sm: 'shadow-sm',\n    md: 'shadow-md',\n    lg: 'shadow-lg',\n    xl: 'shadow-xl',\n    '2xl': 'shadow-2xl',\n    inner: 'shadow-inner',\n  };\n\n  // Blur Styles\n  const blurStyles: Record<string, string> = {\n    none: '',\n    sm: 'backdrop-blur-sm',\n    md: 'backdrop-blur-md',\n    lg: 'backdrop-blur-lg',\n    xl: 'backdrop-blur-xl',\n    '2xl': 'backdrop-blur-2xl',\n    '3xl': 'backdrop-blur-3xl',\n  };\n\n  // Position Styles\n  const positionStyles: Record<BadgePosition, string> = {\n    static: 'static',\n    absolute: 'absolute',\n    fixed: 'fixed',\n    sticky: 'sticky',\n  };\n\n  // Get icon size based on badge size\n  const iconSize = iconSizeStyles[size];\n\n  // Build final className - prioritize user's className, fallback to minimal defaults\n  const baseClasses = [\n    'inline-flex items-center justify-center font-medium transition-all duration-200',\n    'focus:outline-none focus:ring-2 focus:ring-offset-2',\n    sizeStyles[size],\n    shapeStyles[shape],\n    animationStyles[animation],\n    durationStyles[animationDuration],\n    shadowStyles[shadow],\n    blurStyles[blur],\n    positionStyles[position],\n    // Only add default styling if no className is provided\n    !className ? 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200' : '',\n    disabled ? 'opacity-50 cursor-not-allowed' : '',\n    active ? 'ring-2 ring-offset-2' : '',\n    glow ? 'shadow-lg' : '',\n    loading ? 'cursor-wait' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  // Add positioning styles if needed\n  const positioningStyles: React.CSSProperties = {\n    ...style,\n    ...(top !== undefined && { top }),\n    ...(right !== undefined && { right }),\n    ...(bottom !== undefined && { bottom }),\n    ...(left !== undefined && { left }),\n    ...(zIndex !== undefined && { zIndex }),\n    ...(opacity !== undefined && { opacity }),\n  };\n\n  const finalClassName = baseClasses;\n  const finalStyle = positioningStyles;\n\n  // Render different components based on props\n  if (href) {\n    return (\n      <a\n        ref={ref as React.Ref<HTMLAnchorElement>}\n        href={href}\n        className={finalClassName}\n        style={finalStyle}\n        onMouseEnter={onHover}\n        onFocus={onFocus}\n        {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}\n      >\n        {loading ? (\n          <LoadingIcon className={iconSize} />\n        ) : (\n          iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\n        )}\n        <span className=\"truncate\">{children}</span>\n        {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\n        {badge && (\n          <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\n            {badge}\n          </span>\n        )}\n        {onDismiss && (\n          <button\n            type=\"button\"\n            aria-label=\"Dismiss\"\n            onClick={handleDismiss}\n            className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\n          >\n            <XIcon className={iconSize} />\n          </button>\n        )}\n      </a>\n    );\n  }\n\n  if (onClick) {\n    return (\n      <button\n        ref={ref as React.Ref<HTMLButtonElement>}\n        onClick={onClick}\n        className={finalClassName}\n        style={finalStyle}\n        onMouseEnter={onHover}\n        onFocus={onFocus}\n        disabled={disabled || loading}\n        {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\n      >\n        {loading ? (\n          <LoadingIcon className={iconSize} />\n        ) : (\n          iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\n        )}\n        <span className=\"truncate\">{children}</span>\n        {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\n        {badge && (\n          <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\n            {badge}\n          </span>\n        )}\n        {onDismiss && (\n          <button\n            type=\"button\"\n            aria-label=\"Dismiss\"\n            onClick={handleDismiss}\n            className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\n          >\n            <XIcon className={iconSize} />\n          </button>\n        )}\n      </button>\n    );\n  }\n\n  return (\n    <div\n      ref={ref as React.Ref<HTMLDivElement>}\n      className={finalClassName}\n      style={finalStyle}\n      onMouseEnter={onHover}\n      onFocus={onFocus}\n      {...(props as React.HTMLAttributes<HTMLDivElement>)}\n    >\n      {loading ? (\n        <LoadingIcon className={iconSize} />\n      ) : (\n        iconLeft && <span className=\"mr-1.5\">{React.cloneElement(iconLeft, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>\n      )}\n      <span className=\"truncate\">{children}</span>\n      {!loading && iconRight && <span className=\"ml-1.5\">{React.cloneElement(iconRight, { className: iconSize } as React.HTMLAttributes<HTMLElement>)}</span>}\n      {badge && (\n        <span className=\"ml-1.5 inline-flex items-center justify-center px-1.5 py-0.5 text-xs font-bold leading-none text-white bg-red-500 rounded-full\">\n          {badge}\n        </span>\n      )}\n      {onDismiss && (\n        <button\n          type=\"button\"\n          aria-label=\"Dismiss\"\n          onClick={handleDismiss}\n          className=\"ml-1.5 -mr-1 flex-shrink-0 rounded-full p-0.5 hover:bg-black/10 focus:outline-none\"\n        >\n          <XIcon className={iconSize} />\n        </button>\n      )}\n    </div>\n  );\n});\n\nBadge.displayName = 'Badge';",
      "type": "registry:ui"
    }
  ]
}