{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "toast",
    "title": "Toast",
    "description": "A modern toast notification system with support for multiple types, positions, and animations.",
    "author": "Reche Soares",
    "type": "registry:ui",
    "dependencies": [],
    "devDependencies": [],
    "registryDependencies": [],
    "cssVars": {
      "dark": {},
      "light": {}
    },
    "files": [
      {
        "path": "toast.tsx",
        "content": "import React from 'react';\nimport { motion } from 'framer-motion';\n\n// Define the props for our Icon components\ninterface IconProps {\n  className?: string;\n}\n\n// Information Icon SVG\nconst InfoIcon: React.FC<IconProps> = ({ className }) => (\n  <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n);\n\n// Success Icon SVG\nconst SuccessIcon: React.FC<IconProps> = ({ className }) => (\n  <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n);\n\n// Warning Icon SVG\nconst WarningIcon: React.FC<IconProps> = ({ className }) => (\n  <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n  </svg>\n);\n\n// Error Icon SVG\nconst ErrorIcon: React.FC<IconProps> = ({ className }) => (\n  <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n);\n\n// Close Icon SVG\nconst CloseIcon: React.FC<IconProps> = ({ className }) => (\n    <svg className={className} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n    </svg>\n);\n\n// Loading Spinner SVG\nconst LoadingSpinner: React.FC<IconProps> = ({ className }) => (\n  <svg className={`animate-spin ${className}`} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n  </svg>\n);\n\n// Define the types for the notification variants\nexport type NotificationType = 'info' | 'success' | 'warning' | 'error' | 'loading';\n\n// Define the notification position types\nexport type NotificationPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';\n\n// Define the props for the Notification component\ninterface NotificationProps {\n  type: NotificationType;\n  title: string;\n  message?: string; // Message is now optional\n  showIcon?: boolean; // New prop to control icon visibility\n  duration?: number; // New prop for auto-dismissal duration in milliseconds\n  onClose: () => void;\n}\n\n// A map to store styles and icons for each notification type\nconst notificationConfig = {\n  info: {\n    bgColor: 'bg-blue-50 dark:bg-blue-950/20',\n    borderColor: 'border-blue-200 dark:border-blue-800/50',\n    iconColor: 'text-blue-500 dark:text-blue-400',\n    icon: <InfoIcon className=\"h-6 w-6\" />,\n    gradient: 'from-blue-100/60 to-transparent dark:from-blue-900/20 dark:to-transparent',\n  },\n  success: {\n    bgColor: 'bg-green-50 dark:bg-green-950/20',\n    borderColor: 'border-green-200 dark:border-green-800/50',\n    iconColor: 'text-green-500 dark:text-green-400',\n    icon: <SuccessIcon className=\"h-6 w-6\" />,\n    gradient: 'from-green-100/60 to-transparent dark:from-green-900/20 dark:to-transparent',\n  },\n  warning: {\n    bgColor: 'bg-yellow-50 dark:bg-yellow-950/20',\n    borderColor: 'border-yellow-200 dark:border-yellow-800/50',\n    iconColor: 'text-yellow-500 dark:text-yellow-400',\n    icon: <WarningIcon className=\"h-6 w-6\" />,\n    gradient: 'from-yellow-100/60 to-transparent dark:from-yellow-900/20 dark:to-transparent',\n  },\n  error: {\n    bgColor: 'bg-red-50 dark:bg-red-950/20',\n    borderColor: 'border-red-200 dark:border-red-800/50',\n    iconColor: 'text-red-500 dark:text-red-400',\n    icon: <ErrorIcon className=\"h-6 w-6\" />,\n    gradient: 'from-red-100/60 to-transparent dark:from-red-900/20 dark:to-transparent',\n  },\n  loading: { // New loading configuration\n    bgColor: 'bg-gray-50 dark:bg-gray-950/20',\n    borderColor: 'border-gray-200 dark:border-gray-800/50',\n    iconColor: 'text-gray-500 dark:text-gray-400',\n    icon: <LoadingSpinner className=\"h-6 w-6\" />,\n    gradient: 'from-gray-100/60 to-transparent dark:from-gray-900/20 dark:to-transparent',\n  },\n};\n\nconst Notification: React.FC<NotificationProps> = ({ type, title, message, showIcon = true, duration, onClose }) => {\n  const config = notificationConfig[type];\n\n  return (\n    // Wrap with motion.div for animations and apply glassy styles with dark mode support\n    <motion.div\n      initial={{ opacity: 0, x: 100 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: 100 }}\n      transition={{ duration: 0.3 }}\n      className={`relative w-full max-w-sm rounded-xl p-4 backdrop-blur-xl bg-white/15 dark:bg-black/15 border border-gray-300/60 dark:border-gray-700/60 overflow-hidden ring-1 ring-gray-200/40 dark:ring-gray-700/40 drop-shadow-xl transition-all duration-300 ease-in-out transform hover:scale-105`}\n    >\n        <div className={`absolute top-0 left-0 h-full w-full bg-gradient-to-br ${config.gradient} opacity-50`}></div>\n        <div className=\"relative z-10 flex items-center space-x-4\">\n            {showIcon && (\n                <div className={`flex-shrink-0 ${config.iconColor}`}>\n                    {config.icon}\n                </div>\n            )}\n            <div className=\"flex-1\">\n                <p className=\"font-normal text-gray-900 dark:text-gray-100 text-lg\">{title}</p>\n                {message && (\n                    <p className=\"text-sm text-gray-800 dark:text-gray-300 mt-1\">{message}</p>\n                )}\n            </div>\n            <button onClick={onClose} className=\"flex-shrink-0 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors p-1.5 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800\">\n                <CloseIcon className=\"h-5 w-5\" />\n            </button>\n        </div>\n        {duration && ( // Render progress bar only if duration is provided\n            <div className=\"absolute bottom-0 left-0 h-1 w-full bg-gray-300/50 dark:bg-gray-600/50 rounded-b-xl overflow-hidden\">\n                <motion.div\n                    initial={{ width: 0 }}\n                    animate={{ width: '100%' }}\n                    transition={{ duration: duration / 1000, ease: \"linear\" }}\n                    onAnimationComplete={() => onClose()} // Call onClose when progress bar animation completes\n                    className={`h-full bg-gradient-to-r from-green-400 via-blue-400 to-sky-400 dark:from-green-500 dark:via-blue-500 dark:to-sky-500`}\n                ></motion.div>\n            </div>\n        )}\n    </motion.div>\n  );\n};\n\nexport default Notification;",
        "type": "registry:ui"
      }
    ]
  }