{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs-classic",
  "title": "Tabs Classic",
  "description": "A minimalistic tabs classic component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "tabs-classic.tsx",
      "content": "'use client';\r\nimport { useState } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nexport default function TabsViewClassic() {\r\n  const [activeTab, setActiveTab] = useState(1);\r\n  const [isHovering, setIsHovering] = useState<number | null>(null);\r\n\r\n  const tabs = [\r\n    {\r\n      id: 1,\r\n      name: 'Photos',\r\n      icon: 'ðŸ“¸',\r\n      color: 'from-pink-500 to-rose-500',\r\n      content:\r\n        'This is the PHOTOS tab content. Here you would display your photo gallery or image collection.',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Music',\r\n      icon: 'ðŸŽµ',\r\n      color: 'from-purple-500 to-indigo-500',\r\n      content:\r\n        'This is the MUSIC tab content. Here you would display your music player or audio tracks.',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Videos',\r\n      icon: 'ðŸŽ¬',\r\n      color: 'from-blue-500 to-cyan-500',\r\n      content:\r\n        'This is the VIDEOS tab content. Here you would display your video player or video collection.',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='w-full max-w-2xl mx-auto'>\r\n      {/* Tabs layout with cards */}\r\n      <div className='grid grid-cols-3 gap-4 mb-8'>\r\n        {tabs.map((tab) => (\r\n          <motion.div\r\n            key={tab.id}\r\n            onClick={() => setActiveTab(tab.id)}\r\n            onMouseEnter={() => setIsHovering(tab.id)}\r\n            onMouseLeave={() => setIsHovering(null)}\r\n            className={`relative overflow-hidden rounded-xl cursor-pointer ${\r\n              activeTab === tab.id\r\n                ? `bg-gradient-to-br ${tab.color} shadow-lg`\r\n                : 'bg-white dark:bg-gray-800 shadow hover:shadow-md'\r\n            }`}\r\n            whileHover={{ y: -5, transition: { duration: 0.2 } }}\r\n            whileTap={{ scale: 0.98 }}\r\n            layout\r\n          >\r\n            <div\r\n              className={`p-4 flex flex-col items-center justify-center aspect-[4/3] ${\r\n                activeTab === tab.id\r\n                  ? 'text-white'\r\n                  : 'text-gray-800 dark:text-gray-200'\r\n              }`}\r\n            >\r\n              <motion.div\r\n                className='text-4xl mb-2'\r\n                initial={false}\r\n                animate={{\r\n                  scale:\r\n                    isHovering === tab.id || activeTab === tab.id ? 1.2 : 1,\r\n                  rotate:\r\n                    isHovering === tab.id && activeTab !== tab.id ? 10 : 0,\r\n                }}\r\n                transition={{ type: 'spring', stiffness: 400, damping: 17 }}\r\n              >\r\n                {tab.icon}\r\n              </motion.div>\r\n              <span className='font-medium tracking-wide text-center'>\r\n                {tab.name}\r\n              </span>\r\n            </div>\r\n\r\n            {isHovering === tab.id && activeTab !== tab.id && (\r\n              <motion.div\r\n                className={`absolute inset-0 bg-gradient-to-br opacity-20 ${tab.color}`}\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 0.2 }}\r\n                exit={{ opacity: 0 }}\r\n                transition={{ duration: 0.3 }}\r\n                style={{\r\n                  backgroundImage: `linear-gradient(to bottom right, var(--tw-gradient-stops))`,\r\n                }}\r\n              />\r\n            )}\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Content Area with dynamic colors based on active tab */}\r\n      <AnimatePresence mode='wait'>\r\n        <motion.div\r\n          key={activeTab}\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: -20 }}\r\n          transition={{ duration: 0.3 }}\r\n          className={`relative overflow-hidden rounded-xl p-6 bg-white dark:bg-gray-800 shadow-lg border-t-4 border-gradient-to-r ${tabs.find((t) => t.id === activeTab)?.color}`}\r\n        >\r\n          <div className='absolute top-0 right-0 p-2 flex items-center justify-center'>\r\n            <motion.div\r\n              className='text-2xl opacity-50'\r\n              animate={{\r\n                rotate: [0, 10, 0, -10, 0],\r\n                scale: [1, 1.2, 1, 1.2, 1],\r\n              }}\r\n              transition={{\r\n                duration: 2,\r\n                ease: 'easeInOut',\r\n                repeat: Infinity,\r\n                repeatDelay: 3,\r\n              }}\r\n            >\r\n              {tabs.find((t) => t.id === activeTab)?.icon}\r\n            </motion.div>\r\n          </div>\r\n\r\n          <h3 className='text-xl font-bold mb-4 text-gray-800 dark:text-white'>\r\n            {tabs.find((t) => t.id === activeTab)?.name}\r\n          </h3>\r\n\r\n          <div className='prose dark:prose-invert'>\r\n            <p>{tabs.find((t) => t.id === activeTab)?.content}</p>\r\n          </div>\r\n\r\n          <div className='mt-6 text-center'>\r\n            <button\r\n              className={`px-4 py-2 rounded-full text-white bg-gradient-to-r ${tabs.find((t) => t.id === activeTab)?.color}`}\r\n            >\r\n              Explore {tabs.find((t) => t.id === activeTab)?.name}\r\n            </button>\r\n          </div>\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "tabs-view-classic.tsx",
      "content": "'use client';\r\nimport { useState } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nexport default function TabsViewClassic() {\r\n  const [activeTab, setActiveTab] = useState(1);\r\n  const [isHovering, setIsHovering] = useState<number | null>(null);\r\n\r\n  const tabs = [\r\n    {\r\n      id: 1,\r\n      name: 'Photos',\r\n      icon: 'ðŸ“¸',\r\n      color: 'from-pink-500 to-rose-500',\r\n      content:\r\n        'This is the PHOTOS tab content. Here you would display your photo gallery or image collection.',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Music',\r\n      icon: 'ðŸŽµ',\r\n      color: 'from-purple-500 to-indigo-500',\r\n      content:\r\n        'This is the MUSIC tab content. Here you would display your music player or audio tracks.',\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Videos',\r\n      icon: 'ðŸŽ¬',\r\n      color: 'from-blue-500 to-cyan-500',\r\n      content:\r\n        'This is the VIDEOS tab content. Here you would display your video player or video collection.',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='w-full max-w-2xl mx-auto'>\r\n      {/* Tabs layout with cards */}\r\n      <div className='grid grid-cols-3 gap-4 mb-8'>\r\n        {tabs.map((tab) => (\r\n          <motion.div\r\n            key={tab.id}\r\n            onClick={() => setActiveTab(tab.id)}\r\n            onMouseEnter={() => setIsHovering(tab.id)}\r\n            onMouseLeave={() => setIsHovering(null)}\r\n            className={`relative overflow-hidden rounded-xl cursor-pointer ${\r\n              activeTab === tab.id\r\n                ? `bg-gradient-to-br ${tab.color} shadow-lg`\r\n                : 'bg-white dark:bg-gray-800 shadow hover:shadow-md'\r\n            }`}\r\n            whileHover={{ y: -5, transition: { duration: 0.2 } }}\r\n            whileTap={{ scale: 0.98 }}\r\n            layout\r\n          >\r\n            <div\r\n              className={`p-4 flex flex-col items-center justify-center aspect-[4/3] ${\r\n                activeTab === tab.id\r\n                  ? 'text-white'\r\n                  : 'text-gray-800 dark:text-gray-200'\r\n              }`}\r\n            >\r\n              <motion.div\r\n                className='text-4xl mb-2'\r\n                initial={false}\r\n                animate={{\r\n                  scale:\r\n                    isHovering === tab.id || activeTab === tab.id ? 1.2 : 1,\r\n                  rotate:\r\n                    isHovering === tab.id && activeTab !== tab.id ? 10 : 0,\r\n                }}\r\n                transition={{ type: 'spring', stiffness: 400, damping: 17 }}\r\n              >\r\n                {tab.icon}\r\n              </motion.div>\r\n              <span className='font-medium tracking-wide text-center'>\r\n                {tab.name}\r\n              </span>\r\n            </div>\r\n\r\n            {isHovering === tab.id && activeTab !== tab.id && (\r\n              <motion.div\r\n                className={`absolute inset-0 bg-gradient-to-br opacity-20 ${tab.color}`}\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 0.2 }}\r\n                exit={{ opacity: 0 }}\r\n                transition={{ duration: 0.3 }}\r\n                style={{\r\n                  backgroundImage: `linear-gradient(to bottom right, var(--tw-gradient-stops))`,\r\n                }}\r\n              />\r\n            )}\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Content Area with dynamic colors based on active tab */}\r\n      <AnimatePresence mode='wait'>\r\n        <motion.div\r\n          key={activeTab}\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: -20 }}\r\n          transition={{ duration: 0.3 }}\r\n          className={`relative overflow-hidden rounded-xl p-6 bg-white dark:bg-gray-800 shadow-lg border-t-4 border-gradient-to-r ${tabs.find((t) => t.id === activeTab)?.color}`}\r\n        >\r\n          <div className='absolute top-0 right-0 p-2 flex items-center justify-center'>\r\n            <motion.div\r\n              className='text-2xl opacity-50'\r\n              animate={{\r\n                rotate: [0, 10, 0, -10, 0],\r\n                scale: [1, 1.2, 1, 1.2, 1],\r\n              }}\r\n              transition={{\r\n                duration: 2,\r\n                ease: 'easeInOut',\r\n                repeat: Infinity,\r\n                repeatDelay: 3,\r\n              }}\r\n            >\r\n              {tabs.find((t) => t.id === activeTab)?.icon}\r\n            </motion.div>\r\n          </div>\r\n\r\n          <h3 className='text-xl font-bold mb-4 text-gray-800 dark:text-white'>\r\n            {tabs.find((t) => t.id === activeTab)?.name}\r\n          </h3>\r\n\r\n          <div className='prose dark:prose-invert'>\r\n            <p>{tabs.find((t) => t.id === activeTab)?.content}</p>\r\n          </div>\r\n\r\n          <div className='mt-6 text-center'>\r\n            <button\r\n              className={`px-4 py-2 rounded-full text-white bg-gradient-to-r ${tabs.find((t) => t.id === activeTab)?.color}`}\r\n            >\r\n              Explore {tabs.find((t) => t.id === activeTab)?.name}\r\n            </button>\r\n          </div>\r\n        </motion.div>\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}